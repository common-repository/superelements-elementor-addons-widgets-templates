/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./includes/Templates/assets/js/template.js":
/*!**************************************************!*\
  !*** ./includes/Templates/assets/js/template.js ***!
  \**************************************************/
/***/ (() => {

eval("!function($, $elementor, $se) {\n\n    window.liteTranslated = function (stringKey, templateArgs) {\n        return elementorCommon.translate(stringKey, null, templateArgs, superElementorEditor.i18n)\n    };\n\n    var $app = {\n        Views: {},\n        Models: {},\n        Collections: {},\n        Behaviors: {},\n        Layout: null,\n        Manager: null\n    };\n    $app.Models.Template = Backbone.Model.extend({\n        defaults: {\n            template_id: 0,\n            title: \"\",\n            type: \"\",\n            thumbnail: \"\",\n            url: \"\",\n            liveurl: \"\",\n            favorite: \"\",\n            tags: [],\n            isPro: !1\n        }\n    }), \n    $app.Collections.Template = Backbone.Collection.extend({\n        model: $app.Models.Template\n    }), \n    $app.Behaviors.InsertTemplate = Marionette.Behavior.extend({\n        ui: {\n            insertButton: \".liteTemplateLibrary_insert-button\"\n        },\n        events: {\n            \"click @ui.insertButton\": \"onInsertButtonClick\"\n        },\n        onInsertButtonClick: function() {\n            $se.library.insertTemplate({\n                model: this.view.model\n            })\n        }\n    }), \n    $app.Views.EmptyTemplateCollection = Marionette.ItemView.extend({\n        id: \"elementor-template-library-templates-empty\",\n        template: \"#se-liteTemplateLibrary_empty\",\n        ui: {\n            title: \".elementor-template-library-blank-title\",\n            message: \".elementor-template-library-blank-message\"\n        },\n        modesStrings: {\n            empty: {\n                title: liteTranslated(\"templatesEmptyTitle\"),\n                message: liteTranslated(\"templatesEmptyMessage\")\n            },\n            noResults: {\n                title: liteTranslated(\"templatesNoResultsTitle\"),\n                message: liteTranslated(\"templatesNoResultsMessage\")\n            }\n        },\n        getCurrentMode: function() {\n            return $se.library.getFilter(\"text\") ? \"noResults\" : \"empty\"\n        },\n        onRender: function() {\n            var getText = this.modesStrings[this.getCurrentMode()];\n            this.ui.title.html(getText.title), this.ui.message.html(getText.message)\n        }\n    }), \n    $app.Views.Loading = Marionette.ItemView.extend({\n        template: \"#se-liteTemplateLibrary_loading\",\n        id: \"liteTemplateLibrary_loading\"\n    }), \n    $app.Views.Logo = Marionette.ItemView.extend({\n        template: \"#se-liteTemplateLibrary_header-logo\",\n        className: \"liteTemplateLibrary_header-logo\",\n        templateHelpers: function() {\n            return {\n                title: this.getOption(\"title\")\n            }\n        }\n    }), \n    $app.Views.BackButton = Marionette.ItemView.extend({\n        template: \"#se-liteTemplateLibrary_header-back\",\n        id: \"elementor-template-library-header-preview-back\",\n        className: \"liteTemplateLibrary_header-back\",\n        events: function() {\n            return {\n                click: \"onClick\"\n            }\n        },\n        onClick: function() {\n            $se.library.showTemplatesView()\n        }\n    }), \n    $app.Views.Menu = Marionette.ItemView.extend({\n        template: \"#se-liteTemplateLibrary_header-menu\",\n        id: \"elementor-template-library-header-menu\",\n        className: \"liteTemplateLibrary_header-menu\",\n        templateHelpers: function() {\n            return $se.library.getTabs()\n        },\n        ui: {\n            menuItem: \".elementor-template-library-menu-item\"\n        },\n        events: {\n            \"click @ui.menuItem\": \"onMenuItemClick\"\n        },\n        onMenuItemClick: function( tergetArgs ) {\n            $se.library.setFilter(\"tags\", \"\"), $se.library.setFilter(\"text\", \"\"), $se.library.setFilter(\"type\", tergetArgs.currentTarget.dataset.tab, !0), $se.library.showTemplatesView()\n        }\n    }), \n    $app.Views.ResponsiveMenu = Marionette.ItemView.extend({\n        template: \"#se-liteTemplateLibrary_header-menu-responsive\",\n        id: \"elementor-template-library-header-menu-responsive\",\n        className: \"liteTemplateLibrary_header-menu-responsive\",\n        ui: {\n            items: \"> .elementor-component-tab\"\n        },\n        events: {\n            \"click @ui.items\": \"onTabItemClick\"\n        },\n        onTabItemClick: function(dataTarget) {\n            var currentTerget = $(dataTarget.currentTarget),\n                getTab = currentTerget.data(\"tab\");\n            $se.library.channels.tabs.trigger(\"change:device\", getTab, currentTerget)\n        }\n    }), \n    $app.Views.Actions = Marionette.ItemView.extend({\n        template: \"#se-liteTemplateLibrary_header-actions\",\n        id: \"elementor-template-library-header-actions\",\n        ui: {\n            sync: \"#liteTemplateLibrary_header-sync i\"\n        },\n        events: {\n            \"click @ui.sync\": \"onSyncClick\"\n        },\n        onSyncClick: function() {\n            var superElements = this;\n            superElements.ui.sync.addClass(\"eicon-animation-spin\"), $se.library.requestLibraryData({\n                onUpdate: function() {\n                    superElements.ui.sync.removeClass(\"eicon-animation-spin\"), $se.library.updateBlocksView()\n                },\n                forceUpdate: !0,\n                forceSync: !0\n            })\n        }\n    }), \n    $app.Views.InsertWrapper = Marionette.ItemView.extend({\n        template: \"#se-liteTemplateLibrary_header-insert\",\n        id: \"elementor-template-library-header-preview\",\n        behaviors: {\n            insertTemplate: {\n                behaviorClass: $app.Behaviors.InsertTemplate\n            }\n        }\n    }), \n    $app.Views.Preview = Marionette.ItemView.extend({\n        template: \"#se-liteTemplateLibrary_preview\",\n        className: \"liteTemplateLibrary_preview\",\n        ui: function() {\n            return {\n                img: \"> img\"\n            }\n        },\n        onRender: function() {\n            this.ui.img.attr(\"src\", this.getOption(\"url\")).hide();\n            var thisElement = this,\n            renderData = (new $app.Views.Loading).render();\n            this.$el.append(renderData.el), this.ui.img.on(\"load\", function() {\n                thisElement.$el.find(\"#liteTemplateLibrary_loading\").remove(), thisElement.ui.img.show()\n            })\n        }\n    }), \n    $app.Views.TemplateCollection = Marionette.CompositeView.extend({\n        template: \"#se-liteTemplateLibrary_templates\",\n        id: \"liteTemplateLibrary_templates\",\n        className: function() {\n            return \"liteTemplateLibrary_templates liteTemplateLibrary_templates--\" + $se.library.getFilter(\"type\")\n        },\n        childViewContainer: \"#liteTemplateLibrary_templates-list\",\n        emptyView: function() {\n            return new $app.Views.EmptyTemplateCollection\n        },\n        ui: {\n            templatesWindow: \".liteTemplateLibrary_templates-window\",\n            textFilter: \"#liteTemplateLibrary_search\",\n            tagsFilter: \"#liteTemplateLibrary_filter-tags\",\n            filterBar: \"#liteTemplateLibrary_toolbar-filter\",\n            counter: \"#liteTemplateLibrary_toolbar-counter\"\n        },\n        events: {\n            \"input @ui.textFilter\": \"onTextFilterInput\",\n            \"click @ui.tagsFilter li\": \"onTagsFilterClick\"\n        },\n        getChildView: function(element) {\n            return $app.Views.Template\n        },\n        initialize: function() {\n            this.listenTo($se.library.channels.templates, \"filter:change\", this._renderChildren)\n        },\n        filter: function(data) {\n            var seFilterTerms = $se.library.getFilterTerms(),\n                 filterBool = !0;\n            return _.each(seFilterTerms, function(item, index) {\n                var getSeFilter = $se.library.getFilter(index);\n                if (getSeFilter && item.callback) {\n                    var seCallBack = item.callback.call(data, getSeFilter);\n                    return seCallBack || (filterBool = !1), seCallBack\n                }\n            }), filterBool\n        },\n        setMasonrySkin: function() {\n            \n            if ('section' === $se.library.getFilter(\"type\")) {\n                var contentGet = new elementorModules.utils.Masonry({\n                    container: this.$childViewContainer,\n                    items: this.$childViewContainer.children()\n                });\n                this.$childViewContainer.imagesLoaded(contentGet.run.bind(contentGet))\n            }\n        },\n        onRenderCollection: function() {\n            this.setMasonrySkin(), this.updatePerfectScrollbar(), this.setTemplatesFoundText()\n        },\n        setTemplatesFoundText: function() {\n            var getSeType = $se.library.getFilter(\"type\"),\n                getLength = this.children.length;\n            text = \"<strong>\" + getLength + \"</strong>\", text += \"section\" === getSeType ? \" block\" : \" \" + getSeType, getLength > 1 && (text += \"seGetTag\"), text += \" found\", this.ui.counter.html(text)\n        },\n        onTextFilterInput: function() {\n            var seElement = this;\n            _.defer(function() {\n                $se.library.setFilter(\"text\", seElement.ui.textFilter.val())\n            })\n        },\n        onTagsFilterClick: function(data) {\n            var seGetCurrent = $(data.currentTarget),\n                seGetTag = seGetCurrent.data(\"tag\");\n            $se.library.setFilter(\"tags\", seGetTag), seGetCurrent.addClass(\"active\").siblings().removeClass(\"active\"), seGetTag = seGetTag ? $se.library.getTags()[seGetTag] : \"Filter\", this.ui.filterBar.find(\".liteTemplateLibrary_filter-btn\").html(seGetTag + ' <i class=\"eicon-caret-down\"></i>')\n        },\n        updatePerfectScrollbar: function() {\n            this.perfectScrollbar || (this.perfectScrollbar = new PerfectScrollbar(this.ui.templatesWindow[0], {\n                suppressScrollX: !0\n            })), this.perfectScrollbar.isRtl = !1, this.perfectScrollbar.update()\n        },\n        setTagsFilterHover: function() {\n            var seElementThis = this;\n            seElementThis.ui.filterBar.hoverIntent(function() {\n                seElementThis.ui.tagsFilter.addClass(\"liteTemplateLibrary_filter-show\"), seElementThis.ui.filterBar.find(\".liteTemplateLibrary_filter-btn i\").addClass(\"eicon-caret-down\").removeClass(\"eicon-caret-right\")\n            }, function() {\n                seElementThis.ui.tagsFilter.removeClass(\"liteTemplateLibrary_filter-show\");\n                seElementThis.ui.tagsFilter.addClass(\"liteTemplateLibrary_filter-hide\"), seElementThis.ui.filterBar.find(\".liteTemplateLibrary_filter-btn i\").addClass(\"eicon-caret-right\").removeClass(\"eicon-caret-down\")\n            }, {\n                sensitivity: 50,\n                interval: 150,\n                timeout: 100\n            })\n        },\n        onRender: function() {\n            this.setTagsFilterHover(), this.updatePerfectScrollbar()\n        }\n    }), \n    $app.Views.Template = Marionette.ItemView.extend({\n        template: \"#se-liteTemplateLibrary_template\",\n        className: \"liteTemplateLibrary_template\",\n        ui: {\n            previewButton: \".liteTemplateLibrary_preview-button, .liteTemplateLibrary_template-preview\"\n        },\n        events: {\n            \"click @ui.previewButton\": \"onPreviewButtonClick\"\n        },\n        behaviors: {\n            insertTemplate: {\n                behaviorClass: $app.Behaviors.InsertTemplate\n            }\n        },\n        onPreviewButtonClick: function() {\n            $se.library.showPreviewView(this.model)\n        }\n    }), \n    $app.Modal = elementorModules.common.views.modal.Layout.extend({\n        getModalOptions: function() {\n            return {\n                id: \"liteTemplateLibrary_modal\",\n                hide: {\n                    onOutsideClick: !1,\n                    onEscKeyPress: !0,\n                    onBackgroundClick: !1\n                }\n            }\n        },\n        getTemplateActionButton: function(data) {\n            var seGetProBtn = data.isPro && !superElementorEditor.hasPro ? \"pro-button\" : \"insert-button\";\n            return viewId = \"#se-liteTemplateLibrary_\" + seGetProBtn, template = Marionette.TemplateCache.get(viewId), Marionette.Renderer.render(template)\n        },\n        showLogo: function(logo) {\n            this.getHeaderView().logoArea.show(new $app.Views.Logo(logo))\n        },\n        showDefaultHeader: function() {\n            this.showLogo({\n                title: \"Super Templates\"\n            });\n            var seHeaderView = this.getHeaderView();\n            seHeaderView.tools.show(new $app.Views.Actions), seHeaderView.menuArea.show(new $app.Views.Menu)\n        },\n        showPreviewView: function(data) {\n            var seHeaderPreview = this.getHeaderView();\n            seHeaderPreview.menuArea.show(new $app.Views.ResponsiveMenu), seHeaderPreview.logoArea.show(new $app.Views.BackButton), seHeaderPreview.tools.show(new $app.Views.InsertWrapper({\n                model: data\n            })), this.modalContent.show(new $app.Views.Preview({\n                url: data.get(\"url\")\n            }))\n        },\n        showTemplatesView: function(view) {\n            this.showDefaultHeader(), this.modalContent.show(new $app.Views.TemplateCollection({\n                collection: view\n            }))\n        }\n    }), \n\n    $app.Manager = function() {\n        \n        function addButton() {\n            var $top = $(this).closest(\".elementor-top-section\"),\n                $seID = $top.data(\"id\"),\n                $seContentget = $elementor.documents.getCurrent().container.children,\n                $sl = $top.prev(\".elementor-add-section\");\n                $seContentget && _.each($seContentget, function(seItem, seIndex) {\n                $seID === seItem.id && ($this.atIndex = seIndex)\n            }), $sl.find(\".se_templates_add_button\").length || $sl.find(SE_FIND_SELECTOR).before($sePpenLibraryButton)\n        }\n\n        function initAddButton($element) {\n            var $seSelector = $element.find(SE_FIND_SELECTOR);\n            $seSelector.length && !$element.find(\".se_templates_add_button\").length && $seSelector.before($sePpenLibraryButton), $element.on(\"click.onAddElement\", \".elementor-editor-section-settings .elementor-editor-element-add\", addButton)\n        }\n\n        function onChanges($data, $element) {\n            $element.addClass(\"elementor-active\").siblings().removeClass(\"elementor-active\");\n            var seDevice = $dlResponsiveMap[$data] || $dlResponsiveMap.desktop;\n            $(\".liteTemplateLibrary_preview\").css(\"width\", seDevice)\n        }\n\n        function onEditorLoaded() {\n            var $el = window.elementor.$previewContents,\n                $t = setInterval(function() {\n                    initAddButton($el), $el.find(\".elementor-add-new-section\").length > 0 && clearInterval($t)\n                }, 120);\n                $el.on(\"click.onAddTemplateButton\", \".se_templates_add_button\", $this.showModal.bind($this)), this.channels.tabs.on(\"change:device\", onChanges)\n        }\n\n        var seModal, seGetTag, seFilterType, seUpdateBlockView, seErrorDialog, $this = this;\n        \n        SE_FIND_SELECTOR = \".elementor-add-new-section .elementor-add-section-drag-title\", \n        $sePpenLibraryButton = '<div class=\"elementor-add-section-area-button se_templates_add_button\"> <img src=\"'+superElementorEditor.templateLogo+'\" /> </div>', \n        $dlResponsiveMap = {\n            desktop: \"100%\",\n            tab: \"768px\",\n            mobile: \"360px\"\n        }, \n        this.atIndex = -1, \n        this.channels = {\n            tabs: Backbone.Radio.channel(\"tabs\"),\n            templates: Backbone.Radio.channel(\"templates\")\n        }, \n        this.updateBlocksView = function() {\n            $this.setFilter(\"tags\", \"\", !0), $this.setFilter(\"text\", \"\", !0), $this.getModal().showTemplatesView(seUpdateBlockView)\n        }, \n        this.setFilter = function(name, value, silent) {\n            \n            $this.channels.templates.reply(\"filter:\" + name, value), silent || $this.channels.templates.trigger(\"filter:change\")\n        }, \n        this.getFilter = function(name) {\n            return $this.channels.templates.request(\"filter:\" + name)\n        }, \n        this.getFilterTerms = function() {\n            return {\n                tags: {\n                    callback: function(e) {\n                        return _.any(this.get(\"tags\"), function(t) {\n                            return t.indexOf(e) >= 0\n                        })\n                    }\n                },\n                text: {\n                    callback: function(e) {\n                        return e = e.toLowerCase(), this.get(\"title\").toLowerCase().indexOf(e) >= 0 || _.any(this.get(\"type_tags\"), function(t) {\n                            return i.indexOf(e) >= 0\n                        })\n                    }\n                },\n                type: {\n                    callback: function(e) {\n                        return this.get(\"type\") === e\n                    }\n                }\n            }\n        }, \n        this.showModal = function() {\n            $this.getModal().showModal(), $this.showTemplatesView()\n        }, \n        this.closeModal = function() {\n            this.getModal().hideModal()\n        }, \n        this.getModal = function() {\n            return seModal || (seModal = new $app.Modal), seModal\n        }, \n        this.init = function() {\n            $this.setFilter(\"type\", superElementorEditor.default_tab, !0), $elementor.on(\"preview:loaded\", onEditorLoaded.bind(this))\n        }, \n        this.getTabs = function() {\n            var e = this.getFilter(\"type\");\n            return tabs = JSON.parse(superElementorEditor.tab_style)\n            , _.each(tabs, function(t, i) {\n                e === i && (tabs[e].active = !0)\n            }), {\n                tabs: tabs\n            }\n        }, \n        this.getTags = function() {\n            return seGetTag\n        }, \n        this.getTypeTags = function() {\n            var filterType = $this.getFilter(\"type\");\n            return seFilterType[filterType]\n        }, \n        this.showTemplatesView = function() {\n            $this.setFilter(\"tags\", \"\", !0), $this.setFilter(\"text\", \"\", !0), seUpdateBlockView ? $this.getModal().showTemplatesView(seUpdateBlockView) : $this.loadTemplates(function() {\n                $this.getModal().showTemplatesView(seUpdateBlockView)\n            })\n        }, \n        this.showPreviewView = function(name) {\n            $this.getModal().showPreviewView(name)\n        }, \n        this.loadTemplates = function(name) {\n            $this.requestLibraryData({\n                onBeforeUpdate: $this.getModal().showLoadingView.bind($this.getModal()),\n                onUpdate: function() {\n                    $this.getModal().hideLoadingView(), name && name()\n                }\n            })\n        }, \n        this.requestLibraryData = function(options) {\n            if (seUpdateBlockView && !options.forceUpdate) return void(options.onUpdate && options.onUpdate());\n            options.onBeforeUpdate && options.onBeforeUpdate();\n            var returnAjax = {\n                data: {},\n                success: function($response) {\n                    seUpdateBlockView = new $app.Collections.Template($response.templates), $response.tags && (seGetTag = $response.tags), $response.type_tags && (seFilterType = $response.type_tags), options.onUpdate && options.onUpdate()\n                }\n            };\n            options.forceSync && (t.data.sync = !0), elementorCommon.ajax.addRequest(\"get_se_addon_library_data\", returnAjax)\n        }, \n        this.requestTemplateData = function(tId, seRequest) {\n            var tData = {\n                unique_id: tId,\n                data: {\n                    edit_mode: !0,\n                    display: !0,\n                    template_id: tId\n                }\n            };\n            seRequest && jQuery.extend(!0, tData, seRequest), elementorCommon.ajax.addRequest(\"get_dladdon_template_data\", tData)\n        }, \n        this.insertTemplate = function(html) {\n            var seModel = html.model,\n                seThis = this;\n                seThis.getModal().showLoadingView(), seThis.requestTemplateData(seModel.get(\"template_id\"), {\n                success: function(html) {\n                    seThis.getModal().hideLoadingView(), seThis.getModal().hideModal();\n                    var seIndex = {}; - 1 !== seThis.atIndex && (seIndex.at = seThis.atIndex), $e.run(\"document/elements/import\", {\n                        model: seModel,\n                        data: html,\n                        options: seIndex\n                    }), seThis.atIndex = -1\n                },\n                error: function(html) {\n                    seThis.showErrorDialog(html)\n                },\n                complete: function(html) {\n                    seThis.getModal().hideLoadingView(), window.elementor.$previewContents.find(\".elementor-add-section .elementor-add-section-close\").click()\n                }\n            })\n        }, \n        this.showErrorDialog = function (errorMessage) {\n            if ('object' === (0, _typeof2.default)(errorMessage)) {\n              var message = '';\n              _.each(errorMessage, function (error) {\n                if (!(error !== null && error !== void 0 && error.message)) {\n                  return;\n                }\n                message += '<div>' + error.message + '.</div>';\n              });\n              errorMessage = message;\n            } else if (errorMessage) {\n              errorMessage += '.';\n            }\n            if (errorMessage) {\n              errorMessage = __('The following error(s) occurred while processing the request:', 'superelements-elementor-addons-widgets-templates') + '<div id=\"elementor-template-library-error-info\">' + errorMessage + '</div>';\n            } else {\n              errorMessage = __('Please try again.', 'superelements-elementor-addons-widgets-templates');\n            }\n            self.getErrorDialog().setMessage(errorMessage).show();\n          }, \n        this.getErrorDialog = function() {\n            return seErrorDialog || (seErrorDialog = elementorCommon.dialogsManager.createWidget(\"alert\", {\n                id: \"elementor-template-library-error-dialog\",\n                headerMessage: \"An error occurred\"\n            })), seErrorDialog\n        }\n    }, \n    $se.library = new $app.Manager,\n    $se.library.init(), \n    window.se = $se\n\n}(jQuery, window.elementor, window.se || {});\n\n//# sourceURL=webpack://turbo-reloaded/./includes/Templates/assets/js/template.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./includes/Templates/assets/js/template.js"]();
/******/ 	
/******/ })()
;